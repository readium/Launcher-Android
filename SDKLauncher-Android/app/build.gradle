def ndk_experimental = (rootProject.hasProperty("readium_ndk_experimental") && rootProject.readium_ndk_experimental)

println "[[${project.name}]] (APP) Gradle Experimental: ${ndk_experimental}"

if (ndk_experimental) {
    apply from: 'build_experimental.gradle'
} else {
    apply from: 'build_stable.gradle'
}

repositories {
    if (!ndk_experimental) {
        google()
    }
    maven {
        url "https://maven.google.com"
    }
    mavenCentral()
    jcenter()
    maven { url 'https://maven.fabric.io/public' }
    flatDir {
        dirs '../libs'
    }
}

dependencies {
    compile 'com.nononsenseapps:filepicker:3.0.0'
    compile 'com.android.support:support-v4:23.+'
    compile 'com.koushikdutta.ion:ion:2.+'
    // compile 'com.koushikdutta.async:androidasync:2.+' ALREADY INCLUDED AS DEPENDENCY OF com.koushikdutta.ion
    compile 'commons-io:commons-io:2.4'

    compile('com.crashlytics.sdk.android:crashlytics:2.7.1@aar') {
        transitive = true;
    }
}

task buildCssAssets(type: Copy) {
    from '../../readium-shared-js/build-output/css'
    into './src/main/assets/readium-shared-js/builds/css'
}

task buildSingleBundleAssets(type: Copy) {
    from '../../readium-shared-js/build-output/_multiple-bundles'
    into './src/main/assets/readium-shared-js/builds/multiple-bundle'
}

task buildMultipleBundleAssets(type: Copy) {
    from '../../readium-shared-js/build-output/_single-bundle'
    into './src/main/assets/readium-shared-js/builds/single-bundle'
}

task buildAssets {
    println "Build Js Assets"
}

buildAssets.dependsOn "buildCssAssets",
        "buildSingleBundleAssets",
        "buildMultipleBundleAssets"

apply from: 'build_epubReadingSystem.gradle'

tasks.whenTaskAdded { task ->
    println "[[${project.name}]] (APP) TaskAdded: ${task.name}"

    if (task.name.startsWith("compile")) {
        def isDebug = task.name.toLowerCase().contains("debug")

        if (ndk_experimental) {
            task.dependsOn "buildAssets",
                isDebug ? ":lcp:assembleDebug" : ":lcp:assembleRelease",
                "buildEpubReadingSystem"
        } else {
            task.dependsOn "buildAssets",
                isDebug ? ":lcp:assembleDebug" : ":lcp:assembleRelease",
                "buildEpubReadingSystem"
        }
    }
}
gradle.buildFinished { buildResult ->
    println "[[${project.name}]] (APP) buildFinished"
}
