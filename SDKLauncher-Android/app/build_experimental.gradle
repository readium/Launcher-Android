apply plugin: 'com.android.model.application'
//apply plugin: 'io.fabric'

def ndk_skipX86 = (rootProject.hasProperty("readium_ndk_skipX86") && rootProject.readium_ndk_skipX86)
def ndk_skipARM = (rootProject.hasProperty("readium_ndk_skipARM") && rootProject.readium_ndk_skipARM)
def ndk_clang = (rootProject.hasProperty("readium_ndk_clang") && rootProject.readium_ndk_clang)
def ndk_experimental = (rootProject.hasProperty("readium_ndk_experimental") && rootProject.readium_ndk_experimental)

def key_password =  (rootProject.hasProperty("readium_sign_key_password") ? rootProject.readium_sign_key_password : "nope")
def store_password =  (rootProject.hasProperty("readium_sign_store_password") ? rootProject.readium_sign_store_password : "nope")

def lcpDir = project(':lcp').projectDir
def epub3Dir = project(':epub3').projectDir
def rsdkDir = project(':rsdk').projectDir

def _buildTypes = []
def _productFlavors = []
def currentBuildType
model {
    android.lintOptions {
        checkReleaseBuilds = false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError = false
    }

    // May require -Dorg.gradle.model.dsl=true
    // For example:
    //sh ./gradlew -Dorg.gradle.model.dsl=true assembleRelease
    android.signingConfigs {
        //mySigningConfig {
        create("mySigningConfig") {
            keyAlias = "ReadiumAndroidAPKSign"
            keyPassword = key_password
            storePassword = store_password
            storeType "jks"
            storeFile = new File("app/ReadiumAndroidAPKSign.jks")
        }
    }

    android {
        compileSdkVersion = 28
        buildToolsVersion = "28.0.3"

        defaultConfig {

            // manifest@package attribute in src/main/AndroidManifest.xml
            applicationId = "org.readium.sdk.android.launcher"

            // manifest/uses-sdk@android:minSdkVersion attribute in src/main/AndroidManifest.xml
            minSdkVersion.apiLevel = 19

            // manifest/uses-sdk@android:targetSdkVersion attribute in src/main/AndroidManifest.xml
            targetSdkVersion.apiLevel = 28

            // manifest@android:versionCode attribute in src/main/AndroidManifest.xml
            versionCode 31

            // manifest@android:versionName attribute in src/main/AndroidManifest.xml
            versionName "1.31"
        } //defaultConfig

        sources {
            main {
                java {
                    source {
                        srcDirs = [
                                './src/main/java',
                                "${epub3Dir}/../lib/src/main/java",
                                "${lcpDir}/src/clientlib/java",
                                "${lcpDir}/src/contentfilter/java"
                        ]
                    } //source

                } //java

                jniLibs {
                    dependencies {
                        project ":epub3"
                    } //dependencies

                    source {
                        srcDir "${lcpDir}/libs"
                    }
                } //jniLibs
            } //main
        } //sources

        buildTypes {
            debug {
                ext.enableCrashlytics = false

                minifyEnabled = false
            }
            release {
                ext.enableCrashlytics = false

                minifyEnabled = false
                //proguardFiles.add(file('proguard-rules.txt'))

                //signingConfig = signingConfigs.mySigningConfig
                //signingConfig = $.android.signingConfigs.get("mySigningConfig")
                signingConfig = $("android.signingConfigs.mySigningConfig")
            }
        } //buildTypes

        productFlavors {
            if (!ndk_skipARM && !ndk_skipX86) {
                create('armeabi-v7a--arm64-v8a--x86--x86_64') {
                    ndk.with {
                        abiFilters.add('armeabi-v7a')
                        abiFilters.add('arm64-v8a')
                        abiFilters.add('x86')
                        abiFilters.add('x86_64')
                    }
                }
            } else {
                if (!ndk_skipARM) {
                    create('armeabi-v7a--arm64-v8a') {
                        ndk.with {
                            abiFilters.add('armeabi-v7a')
                            abiFilters.add('arm64-v8a')
                        }
                    }
                }
                if (!ndk_skipX86) {
                    create('x86--x86_64') {
                        ndk.with {
                            abiFilters.add('x86')
                            abiFilters.add('x86_64')
                        }
                    }
                }
            }
        } //productFlavors
    } //android

    components.android {
        binaries.afterEach { binary ->
            println "[[${project.name}]] (APP) components.android.binaries buildType: ${binary.getBuildType().name}"
            if (!_buildTypes.contains(binary.getBuildType().name)) {
                println "[[${project.name}]] (APP) components.android.binaries buildType ADDED"
                _buildTypes += binary.getBuildType().name
            }

            binary.getProductFlavors().each { flavor ->
                println "  [[${project.name}]] (APP) components.android.binaries productFlavor: ${flavor.name}"
                if (!_productFlavors.contains(flavor)) {
                    println "  [[${project.name}]] (APP) components.android.binaries productFlavor ADDED"
                    _productFlavors += flavor
                }

                flavor.ndk.abiFilters.each { abiFilter ->
                    println "    [[${project.name}]] (APP) components.android.binaries abiFilter (${abiFilter})"
                }
            }
            // binary.mergedNdkConfig.cppFlags.add("-DVARIANT=\"" + binary.name + "\"")
        }
    }
} //model

gradle.taskGraph.whenReady { taskGraph ->
    println "[[${project.name}]] (APP) taskGraph ready"

    // taskGraph.getAllTasks().last().finalizedBy("copyLibs")
    // taskGraph.getAllTasks().last().doLast "copyLibs"
    taskGraph.getAllTasks().last().doLast {
        println "[[${project.name}]] (APP) last TASK (${currentBuildType})"
    } // .dependsOn "copyLibs"

    if (taskGraph.hasTask(buildRelease)) {
        println "[[${project.name}]] (APP) taskGraph RELEASE (build)"

        currentBuildType = "release"
    } else if (taskGraph.hasTask(buildDebug)) {
        println "[[${project.name}]] (APP) taskGraph DEBUG (build)"

        currentBuildType = "debug"
    } else {
        if (taskGraph.hasTask(assembleRelease)) {
            println "[[${project.name}]] (APP) taskGraph RELEASE (assemble)"

            currentBuildType = "release"
        }
        if (taskGraph.hasTask(assembleDebug)) {
            println "[[${project.name}]] (APP) taskGraph DEBUG (assemble)"

            currentBuildType = "debug"
        }
    }
}

task buildRelease(type: GradleBuild, dependsOn: build) {
}

task buildDebug(type: GradleBuild, dependsOn: build) {
}

// task assembleRelease(type: GradleBuild, dependsOn: assemble) {
// }

// task assembleDebug(type: GradleBuild, dependsOn: assemble) {
// }

// tasks.all { task ->
//     if (task.name.startsWith('compile') && task.name.endsWith('Ndk')) {
//         task.enabled = false
//     }
// }
